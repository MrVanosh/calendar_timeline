{"version":3,"sources":["components/Day.js","components/Calendar.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","div","Timeline","Info","Hour","last","HourTime","h5","HourLine","FirstHalf","SecondHalf","remainingTo30","date","getMinutes","getStatusColor","status","weekdays","Day","data","hours","Array","fill","forEach","_","index","push","hour","firstHalf","React","createRef","secondHalf","useEffect","startDate","endDate","Date","d","setMinutes","getHours","current","style","backgroundColor","getDay","getFullYear","getMonth","getDate","map","window","innerWidth","marginLeft","ref","formatDate","newDate","month","day","Calendar","props","dates","calendar","el","filter","val","self","indexOf","correspondingData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dff51e36.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  @media (max-width: 870px) {\n    width: 140px;\n    flex-direction: column;\n  }\n`\n\nconst Timeline = styled.div`\n  display: flex;\n  align-items: center;\n  @media (max-width: 870px) {\n    flex-direction: column;\n    max-height: 440px;\n    flex-wrap: wrap;\n  }\n`\n\nconst Info = styled.div`\n  text-align: center;\n  margin-right: .5rem;\n  & h3 {\n    margin: 0;\n    padding: 0;\n  }\n  & p {\n    font-size: 10px;\n    margin: 0;\n  }\n`\n\nconst Hour = styled.div`\n  display: flex;\n  flex-direction: column;\n  @media (min-width: 870px) {\n    ${({last}) => last && 'align-self: flex-start'}\n  }\n`\n\nconst HourTime = styled.h5`\n  margin: 0;\n  padding: 0;\n  align-self: flex-start;\n  @media (max-width: 870px) {\n    ${({last}) => last && 'margin-left: -25px !important'}\n  }\n`\n\nconst HourLine = styled.div`\n  display: flex;\n  @media (max-width: 870px) {\n    transform: rotate(90deg);\n  }\n`\n\nconst FirstHalf = styled.div`\n  border-left: 1px solid #000;\n  border-right: 1px solid #000;\n  border-bottom: 2px solid #000;\n  width: 15px;\n  height: 15px;\n`\n\nconst SecondHalf = styled.div`\n  border-right: 1px solid #000;\n  border-bottom: 2px solid #000;\n  width: 15px;\n  height: 15px;\n`\n\nfunction remainingTo30(date) {\n  if(date.getMinutes() < 30) {\n    return 30\n  } else {\n    return 60\n  }\n}\n\nfunction getStatusColor(status) {\n  if(status === 'available') return '#2f74bc'\n  if(status === 'notavailable') return '#52afaf'\n  if(status === 'delayed') return '#f2a53c'\n}\n\nconst weekdays = [\n  'Ni',\n  'Pn',\n  'Wt',\n  'Śr',\n  'Cz',\n  'Pt',\n  'So'\n]\n\nfunction Day({date, data}) {\n  const hours = []\n  Array(25).fill().forEach((_, index) => hours.push({\n    hour: index,\n    firstHalf: React.createRef(),\n    secondHalf: React.createRef()\n  })) // Stworzenie tablicy z godzinami i referencjami do pól tych dni\n\n  useEffect(() => {\n    data.forEach(({startDate, endDate, status}) => {\n      startDate = new Date(startDate) // zamiana JSON daty na datę\n      endDate = new Date(endDate) // zamiana JSON daty na datę\n      for (let d = startDate; d < endDate; d.setMinutes(remainingTo30(d))) { // pętla ustawiająca daną połówkę godziny\n        if(d.getMinutes() < 30) {\n          hours[d.getHours()].firstHalf.current.style.backgroundColor = getStatusColor(status)\n        }\n        if(d.getMinutes() >= 30) {\n          hours[d.getHours()].secondHalf.current.style.backgroundColor = getStatusColor(status)\n        }\n      }\n    })\n  }, []) // useEffect by dopiero zacząć działać na godzinach gdy zostanie stworzona i wyrenderowana tablica z godzinami\n\n  date = new Date(date) // zamiana JSON daty na datę\n\n  return (\n    <Wrapper>\n      <Info>\n        <h3>{weekdays[date.getDay()]}</h3>\n        <p>{date.getFullYear()}-{date.getMonth()+1}-{date.getDate()}</p>\n      </Info>\n      <Timeline>\n        {hours.map(({hour, firstHalf, secondHalf}, index) => {\n          return (\n            <>\n              {(window.innerWidth < 870 && index == 12) && (\n                <Hour key={`${date}-${index}`} last={index === 24}>\n                  <HourTime last style={{marginLeft: hour >= 10 ? -9 : -5}}>\n                    {hour}\n                  </HourTime>\n                </Hour>\n              )}\n              <Hour key={`${date}-${index}`} last={index === 24}>\n                <HourTime last={index === 24} style={{marginLeft: hour >= 10 ? -9 : -5}}>\n                  {hour}\n                </HourTime>\n                {hour !== 24 && (\n                  <HourLine>\n                    <FirstHalf ref={firstHalf} />\n                    <SecondHalf ref={secondHalf} />\n                  </HourLine>\n                )}\n              </Hour>\n            </>\n          )\n        })}\n      </Timeline>\n    </Wrapper>\n  )\n}\n\nexport default Day","import React from 'react'\nimport styled from 'styled-components'\nimport Day from './Day'\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  @media (max-width: 870px) {\n    flex-direction: row;\n  }\n`\n\n// Formatowanie daty na RRRR-MM-DD (aby podzielić dane na odpowiednie dni)\nfunction formatDate(date) {\n  const newDate = new Date(date)\n  const month = newDate.getMonth() < 10 ? `0${newDate.getMonth()}` : newDate.getMonth()\n  const day = newDate.getDate() < 10 ? `0${newDate.getDate()}` : newDate.getDate()\n  return `${newDate.getFullYear()}-${month}-${day}`\n}\n\nfunction Calendar(props) {\n  let dates = props.calendar.map(el => formatDate(el.startDate)).filter((val, index, self) => self.indexOf(val) === index) // Unikalne daty, które występują\n  dates = dates.map(date => {\n    const correspondingData = props.calendar.filter(data => formatDate(data.startDate) === date)\n    return {\n      date: date,\n      data: correspondingData\n    }\n  }) // Stworzenie listy obiektów danych dni\n\n  return (\n    <Wrapper {...props}>\n      {dates.map(({data, date}) => <Day date={date} data={data} />)}\n    </Wrapper>\n  )\n}\n\nexport default Calendar","import Calendar from './components/Calendar'\n\nfunction App() {\n  const calendar = [\n    {\n      startDate: '2020-10-25T02:00:00.0Z',\n      endDate: '2020-10-25T03:00:00.0Z',\n      status: 'available'\n    },\n    {\n      startDate: '2020-10-25T03:00:00.000Z',\n      endDate: '2020-10-25T03:30:00.000Z',\n      status: 'notavailable'\n    },\n    {\n      startDate: '2020-10-25T09:00:00.000Z',\n      endDate: '2020-10-25T11:00:00.000Z',\n      status: 'notavailable'\n    },\n    {\n      startDate: '2020-10-25T15:00:00.000Z',\n      endDate: '2020-10-25T17:00:00.000Z',\n      status: 'delayed'\n    },\n    {\n      startDate: '2020-10-26T12:00:00.000Z',\n      endDate: '2020-10-26T13:00:00.000Z',\n      status: 'available'\n    },\n    {\n      startDate: '2020-10-26T13:00:00.000Z',\n      endDate: '2020-10-26T14:00:00.000Z',\n      status: 'notavailable'\n    },\n    {\n      startDate: '2020-10-27T15:00:00.000Z',\n      endDate: '2020-10-27T15:30:00.000Z',\n      status: 'delayed'\n    },\n  ]\n\n  return (\n    <div>\n      <Calendar calendar={calendar} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}